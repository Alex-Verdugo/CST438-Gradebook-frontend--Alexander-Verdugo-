[{"/Users/a.v./Documents/GitHub/CST438-Gradebook-frontend--Alexander-Verdugo-/src/index.js":"1","/Users/a.v./Documents/GitHub/CST438-Gradebook-frontend--Alexander-Verdugo-/src/App.js":"2","/Users/a.v./Documents/GitHub/CST438-Gradebook-frontend--Alexander-Verdugo-/src/reportWebVitals.js":"3","/Users/a.v./Documents/GitHub/CST438-Gradebook-frontend--Alexander-Verdugo-/src/components/Assignment.js":"4","/Users/a.v./Documents/GitHub/CST438-Gradebook-frontend--Alexander-Verdugo-/src/components/Gradebook.js":"5","/Users/a.v./Documents/GitHub/CST438-Gradebook-frontend--Alexander-Verdugo-/src/constants.js":"6","/Users/a.v./Documents/GitHub/CST438-Gradebook-frontend--Alexander-Verdugo-/src/components/AddAssignment.js":"7"},{"size":500,"mtime":1664905101181,"results":"8","hashOfConfig":"9"},{"size":931,"mtime":1664907028827,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1664905101181,"results":"11","hashOfConfig":"9"},{"size":3243,"mtime":1664911977107,"results":"12","hashOfConfig":"9"},{"size":5289,"mtime":1664905101180,"results":"13","hashOfConfig":"9"},{"size":51,"mtime":1664905101181,"results":"14","hashOfConfig":"9"},{"size":3452,"mtime":1664911251686,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rjrt2",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},"/Users/a.v./Documents/GitHub/CST438-Gradebook-frontend--Alexander-Verdugo-/src/index.js",[],[],"/Users/a.v./Documents/GitHub/CST438-Gradebook-frontend--Alexander-Verdugo-/src/App.js",[],[],[],"/Users/a.v./Documents/GitHub/CST438-Gradebook-frontend--Alexander-Verdugo-/src/reportWebVitals.js",[],[],"/Users/a.v./Documents/GitHub/CST438-Gradebook-frontend--Alexander-Verdugo-/src/components/Assignment.js",["40"],[],"import React from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Link } from 'react-router-dom'\nimport Cookies from 'js-cookie';\nimport Button from '@mui/material/Button';\nimport Radio from '@mui/material/Radio';\nimport {DataGrid} from '@mui/x-data-grid';\nimport {SERVER_URL} from '../constants.js'\n\n// NOTE:  for OAuth security, http request must have\n//   credentials: 'include' \n//\n\nclass Assignment extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {selected: 0, assignments: []};\n    };\n \n   componentDidMount() {\n    this.fetchAssignments();\n  }\n \n  fetchAssignments = () => {\n    console.log(\"Assignment.fetchAssignments\");\n    const token = Cookies.get('XSRF-TOKEN');\n    fetch(`${SERVER_URL}/gradebook`, \n      {  \n        method: 'GET', \n        headers: { 'X-XSRF-TOKEN': token }\n      } )\n    .then((response) => response.json()) \n    .then((responseData) => { \n      if (Array.isArray(responseData.assignments)) {\n        //  add to each assignment an \"id\"  This is required by DataGrid  \"id\" is the row index in the data grid table \n        this.setState({ assignments: responseData.assignments.map((assignment, index) => ( { id: index, ...assignment } )) });\n      } else {\n        toast.error(\"Fetch failed.\", {\n          position: toast.POSITION.BOTTOM_LEFT\n        });\n      }        \n    })\n    .catch(err => console.error(err)); \n  }\n  \n   onRadioClick = (event) => {\n    console.log(\"Assignment.onRadioClick \" + event.target.value);\n    this.setState({selected: event.target.value});\n  }\n  \n  render() {\n     const columns = [\n      {\n        field: 'assignmentName',\n        headerName: 'Assignment',\n        width: 400,\n        renderCell: (params) => (\n          <div>\n          <Radio\n            checked={params.row.id == this.state.selected}\n            onChange={this.onRadioClick}\n            value={params.row.id}\n            color=\"default\"\n            size=\"small\"\n          />\n          {params.value}\n          </div>\n        )\n      },\n      { field: 'courseTitle', headerName: 'Course', width: 300 },\n      { field: 'dueDate', headerName: 'Due Date', width: 200 }\n      ];\n      \n      const assignmentSelected = this.state.assignments[this.state.selected];\n      return (\n          <div align=\"left\" >\n            <h4>Assignment(s) ready to grade: </h4>\n              <div style={{ height: 450, width: '100%', align:\"left\"   }}>\n                <DataGrid rows={this.state.assignments} columns={columns} />\n              </div>                \n            <Button component={Link} to={{pathname:'/gradebook',   assignment: assignmentSelected }} \n                    variant=\"outlined\" color=\"primary\" disabled={this.state.assignments.length===0}  style={{margin: 10}}>\n              Grade\n            </Button>\n            <Button component={Link} to={{pathname:'/addassignment',   assignment: null }} \n                    variant=\"outlined\" color=\"primary\" disabled={this.state.assignments.length===0}  style={{margin: 10}}>\n              Add A New Assignment\n            </Button>\n            <ToastContainer autoClose={1500} /> \n          </div>\n      )\n  }\n}  \n\nexport default Assignment;","/Users/a.v./Documents/GitHub/CST438-Gradebook-frontend--Alexander-Verdugo-/src/components/Gradebook.js",[],[],"/Users/a.v./Documents/GitHub/CST438-Gradebook-frontend--Alexander-Verdugo-/src/constants.js",[],[],"/Users/a.v./Documents/GitHub/CST438-Gradebook-frontend--Alexander-Verdugo-/src/components/AddAssignment.js",["41","42","43"],[],"import React from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Button from '@mui/material/Button';\nimport Grid from '@mui/material/Grid';\nimport {DataGrid} from '@mui/x-data-grid';\n// import {DataGrid} from '@mui/x-data-grid';\n// import Cookies from 'js-cookie';\n// import {SERVER_URL} from '../constants.js';\n\n// NOTE:  for OAuth security, http request must have\n//   credentials: 'include' \n//\n\nclass AddAssignment extends React.Component {\n\n    constructor(props) {\n        super(props);\n      };\n\n    // when submit button pressed, send new assignment to back end \n    // handleSubmit = ( ) => {\n    //     console.log(\"AddAssignment.handleSubmit\");\n    //     const token = Cookies.get('XSRF-TOKEN');\n        \n    //     fetch(`` , \n    //         {  \n    //           method: 'POST', \n    //           headers: { 'Content-Type': 'application/json',\n    //                      'X-XSRF-TOKEN': token }, \n    //           body: JSON.stringify({assignmentId:this.props.location.assignment.assignmentId,  grades: this.state.grades})\n    //         } )\n    //     .then(res => {\n    //         if (res.ok) {\n    //           toast.success(\"Assignment successfully Created\", {\n    //           position: toast.POSITION.BOTTOM_LEFT\n    //           });\n            \n    //         } })\n    //       .catch(err => {\n    //         toast.error(\"Failed to Create Assignment\", {\n    //           position: toast.POSITION.BOTTOM_LEFT\n    //         });\n    //         console.error(err);\n    //       });\n    //  };        \n\n    // when user has entered a new grade, update the state\n    //  id    - index of row of grade change\n    //  props - contains the new grade\n    handleEditCellChange = ({ id, field, props }) => {\n        console.log(\"edit cell change id:\"+id+\" field:\"+field+\" value:\"+props.value);\n        const newgrades = this.state.grades.map(r => {\n          if (r.id === id){\n            return {...r, [field]:props.value};\n          } else {\n            return {...r};\n          }\n        });\n        this.setState({grades: newgrades});\n      };\n \n     handleCellEditCommit = (e) => {\n       console.log(\"handleCellEditCommit \"+JSON.stringify(e));\n       const newgrades= this.state.grades.map(r => {\n         //console.log(r.id+\"   \"+e.id);\n         if (r.id === e.id) {\n           return {...r, [e.field]:e.value};\n         } else {\n           return {...r};\n         }\n       });\n       this.setState({grades: newgrades});\n     };\n  \n\n    render() {\n        const columns = [\n         { field: 'assignmentName', headerName: 'Assignment Name', width: 250, \n        //  renderCell: (params) => (\n        //     <div contentEditable = \"true\">\n            \n        //     </div>\n        //   )\n        \n        },\n         { field: 'dueDate', headerName: 'Due Date', width: 250},\n         ];\n         \n         return(\n             <div align=\"left\" >\n                <h4>Enter Assignment Feilds </h4>\n               <div style={{ height: 400, width: '100%' }}>\n                    <DataGrid columns={columns} />\n                 <Button id=\"CreateAssignment\" variant=\"outlined\" color=\"primary\" style={{margin: 10}} onClick={this.handlecreate} >\n                    Create Assignment\n                 </Button>\n               </div>\n               <ToastContainer autoClose={1500} />   \n             </div>\n             ); \n         }\n\n}\nexport default AddAssignment;",{"ruleId":"44","severity":1,"message":"45","line":61,"column":36,"nodeType":"46","messageId":"47","endLine":61,"endColumn":38},{"ruleId":"48","severity":1,"message":"49","line":2,"column":26,"nodeType":"50","messageId":"51","endLine":2,"endColumn":31},{"ruleId":"48","severity":1,"message":"52","line":5,"column":8,"nodeType":"50","messageId":"51","endLine":5,"endColumn":12},{"ruleId":"53","severity":1,"message":"54","line":17,"column":5,"nodeType":"55","messageId":"56","endLine":19,"endColumn":8},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'toast' is defined but never used.","Identifier","unusedVar","'Grid' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor"]