{"ast":null,"code":"var _jsxFileName = \"/Users/a.v./Documents/GitHub/CST438-Gradebook-frontend--Alexander-Verdugo-/src/components/Gradebook.js\";\nimport React from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Grid from '@mui/material/Grid';\nimport { DataGrid } from '@mui/x-data-grid';\nimport Button from '@mui/material/Button';\nimport Cookies from 'js-cookie';\nimport { SERVER_URL } from '../constants.js'; // NOTE:  for OAuth security, http request must have\n//   credentials: 'include' \n//\n//  required properties -  assignment\n//  \n//  NOTE: because Gradebook is invoked via <Link> in Assignment.js components\n//  properties are passed as attributes of props.location \n//\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Gradebook extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.fetchGrades = () => {\n      console.log(\"Gradebook.fetchGrades\");\n      const token = Cookies.get('XSRF-TOKEN');\n      fetch(`${SERVER_URL}/gradebook/${this.props.location.assignment.assignmentId}`, {\n        method: 'GET',\n        headers: {\n          'X-XSRF-TOKEN': token\n        }\n      }).then(response => response.json()).then(responseData => {\n        if (Array.isArray(responseData.grades)) {\n          // add attribute \"id\" to each row. Required for DataGrid,  id is index of row (i.e. 0, 1, 2, ...)  \n          this.setState({\n            grades: responseData.grades.map((r, index) => {\n              return {\n                id: index,\n                ...r\n              };\n            })\n          });\n        } else {\n          toast.error(\"Fetch failed.\", {\n            position: toast.POSITION.BOTTOM_LEFT\n          });\n        }\n      }).catch(err => {\n        toast.error(\"Fetch failed.\", {\n          position: toast.POSITION.BOTTOM_LEFT\n        });\n        console.error(err);\n      });\n    };\n\n    this.handleSubmit = () => {\n      console.log(\"Gradebook.handleSubmit\");\n      const token = Cookies.get('XSRF-TOKEN');\n      fetch(`${SERVER_URL}/gradebook/${this.props.location.assignment.assignmentId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-XSRF-TOKEN': token\n        },\n        body: JSON.stringify({\n          assignmentId: this.props.location.assignment.assignmentId,\n          grades: this.state.grades\n        })\n      }).then(res => {\n        if (res.ok) {\n          toast.success(\"Grades successfully updated\", {\n            position: toast.POSITION.BOTTOM_LEFT\n          });\n          this.fetchGrades();\n        } else {\n          toast.error(\"Grade updated failed\", {\n            position: toast.POSITION.BOTTOM_LEFT\n          });\n          console.error('Put http status =' + res.status);\n        }\n      }).catch(err => {\n        toast.error(\"Grade updated failed\", {\n          position: toast.POSITION.BOTTOM_LEFT\n        });\n        console.error(err);\n      });\n    };\n\n    this.handleEditCellChange = _ref => {\n      let {\n        id,\n        field,\n        props\n      } = _ref;\n      console.log(\"edit cell change id:\" + id + \" field:\" + field + \" value:\" + props.value);\n      const newgrades = this.state.grades.map(r => {\n        if (r.id === id) {\n          return { ...r,\n            [field]: props.value\n          };\n        } else {\n          return { ...r\n          };\n        }\n      });\n      this.setState({\n        grades: newgrades\n      });\n    };\n\n    this.handleCellEditCommit = e => {\n      console.log(\"handleCellEditCommit \" + JSON.stringify(e));\n      const newgrades = this.state.grades.map(r => {\n        //console.log(r.id+\"   \"+e.id);\n        if (r.id === e.id) {\n          return { ...r,\n            [e.field]: e.value\n          };\n        } else {\n          return { ...r\n          };\n        }\n      });\n      this.setState({\n        grades: newgrades\n      });\n    };\n\n    console.log(\"Gradebook.cnstr \" + JSON.stringify(_props.location));\n    this.state = {\n      grades: []\n    };\n  }\n\n  componentDidMount() {\n    this.fetchGrades();\n  }\n\n  render() {\n    const columns = [{\n      field: 'name',\n      headerName: 'Name',\n      width: 250\n    }, {\n      field: 'email',\n      headerName: 'Email',\n      width: 250\n    }, {\n      field: 'grade',\n      headerName: 'Grade',\n      width: 150,\n      editable: true\n    }];\n    const assignment = this.props.location.assignment;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          align: \"left\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Assignment: \", assignment.assignmentName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 20\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Course: \", assignment.courseTitle]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%'\n        },\n        children: [\"For DEBUG:  display state.\", JSON.stringify(this.state)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 400,\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: this.state.grades,\n          columns: columns,\n          onCellEditCommit: this.handleCellEditCommit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          id: \"Submit\",\n          variant: \"outlined\",\n          color: \"primary\",\n          style: {\n            margin: 10\n          },\n          onClick: this.handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n        autoClose: 1500\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Gradebook;","map":{"version":3,"sources":["/Users/a.v./Documents/GitHub/CST438-Gradebook-frontend--Alexander-Verdugo-/src/components/Gradebook.js"],"names":["React","ToastContainer","toast","Grid","DataGrid","Button","Cookies","SERVER_URL","Gradebook","Component","constructor","props","fetchGrades","console","log","token","get","fetch","location","assignment","assignmentId","method","headers","then","response","json","responseData","Array","isArray","grades","setState","map","r","index","id","error","position","POSITION","BOTTOM_LEFT","catch","err","handleSubmit","body","JSON","stringify","state","res","ok","success","status","handleEditCellChange","field","value","newgrades","handleCellEditCommit","e","componentDidMount","render","columns","headerName","width","editable","assignmentName","courseTitle","height","margin"],"mappings":"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","sourcesContent":["import React  from 'react';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Grid from '@mui/material/Grid';\nimport {DataGrid} from '@mui/x-data-grid';\nimport Button from '@mui/material/Button';\nimport Cookies from 'js-cookie';\nimport {SERVER_URL} from '../constants.js';\n\n// NOTE:  for OAuth security, http request must have\n//   credentials: 'include' \n//\n\n//  required properties -  assignment\n//  \n//  NOTE: because Gradebook is invoked via <Link> in Assignment.js components\n//  properties are passed as attributes of props.location \n//\nclass Gradebook extends React.Component {\n    constructor(props) {\n      super(props);\n      console.log(\"Gradebook.cnstr \"+ JSON.stringify(props.location));\n      this.state = {  grades :  [] };\n    } \n    \n     componentDidMount() {\n      this.fetchGrades();\n    }\n \n    fetchGrades = () => {\n      console.log(\"Gradebook.fetchGrades\");\n      const token = Cookies.get('XSRF-TOKEN');\n      fetch(`${SERVER_URL}/gradebook/${this.props.location.assignment.assignmentId}`, \n        {  \n          method: 'GET', \n          headers: { 'X-XSRF-TOKEN': token }\n        } )\n      .then((response) => response.json()) \n      .then((responseData) => { \n        if (Array.isArray(responseData.grades)) {\n          // add attribute \"id\" to each row. Required for DataGrid,  id is index of row (i.e. 0, 1, 2, ...)  \n          this.setState({ \n            grades: responseData.grades.map((r,index) => {\n                  return {id:index, ...r};\n            })\n          });\n        } else {\n          toast.error(\"Fetch failed.\", {\n            position: toast.POSITION.BOTTOM_LEFT\n          });\n        }        \n      })\n      .catch(err => {\n        toast.error(\"Fetch failed.\", {\n            position: toast.POSITION.BOTTOM_LEFT\n          });\n          console.error(err); \n      })\n    }\n  \n    // when submit button pressed, send updated grades to back end \n    //  and then fetch the new grades.\n    handleSubmit = ( ) => {\n      console.log(\"Gradebook.handleSubmit\");\n      const token = Cookies.get('XSRF-TOKEN');\n      \n      fetch(`${SERVER_URL}/gradebook/${this.props.location.assignment.assignmentId}` , \n          {  \n            method: 'PUT', \n            headers: { 'Content-Type': 'application/json',\n                       'X-XSRF-TOKEN': token }, \n            body: JSON.stringify({assignmentId:this.props.location.assignment.assignmentId,  grades: this.state.grades})\n          } )\n      .then(res => {\n          if (res.ok) {\n            toast.success(\"Grades successfully updated\", {\n            position: toast.POSITION.BOTTOM_LEFT\n            });\n            this.fetchGrades();\n          } else {\n            toast.error(\"Grade updated failed\", {\n            position: toast.POSITION.BOTTOM_LEFT\n            });\n            console.error('Put http status =' + res.status);\n      }})\n        .catch(err => {\n          toast.error(\"Grade updated failed\", {\n            position: toast.POSITION.BOTTOM_LEFT\n          });\n          console.error(err);\n        });\n   };        \n    \n    // when user has entered a new grade, update the state\n    //  id    - index of row of grade change\n    //  props - contains the new grade\n    handleEditCellChange = ({ id, field, props }) => {\n       console.log(\"edit cell change id:\"+id+\" field:\"+field+\" value:\"+props.value);\n       const newgrades = this.state.grades.map(r => {\n         if (r.id === id){\n           return {...r, [field]:props.value};\n         } else {\n           return {...r};\n         }\n       });\n       this.setState({grades: newgrades});\n     };\n\n    handleCellEditCommit = (e) => {\n      console.log(\"handleCellEditCommit \"+JSON.stringify(e));\n      const newgrades= this.state.grades.map(r => {\n        //console.log(r.id+\"   \"+e.id);\n        if (r.id === e.id) {\n          return {...r, [e.field]:e.value};\n        } else {\n          return {...r};\n        }\n      });\n      this.setState({grades: newgrades});\n    };\n \n    render() {\n       const columns = [\n        { field: 'name', headerName: 'Name', width: 250 },\n        { field: 'email', headerName: 'Email', width: 250},\n        { field: 'grade', headerName: 'Grade', width: 150 , editable:true}\n        ];\n        \n        const assignment = this.props.location.assignment;\n      \n        return(\n            <div className=\"App\">\n              <Grid container>\n                <Grid item align=\"left\">\n                   <h4>Assignment: {assignment.assignmentName}</h4>\n                   <h4>Course: {assignment.courseTitle}</h4>                   \n                </Grid>\n              </Grid>\n              <div style={{width:'100%'}}>\n                For DEBUG:  display state.\n                {JSON.stringify(this.state)}\n              </div>\n              <div style={{ height: 400, width: '100%' }}>\n                <DataGrid rows={this.state.grades} columns={columns} onCellEditCommit={this.handleCellEditCommit}  />\n                <Button id=\"Submit\" variant=\"outlined\" color=\"primary\" style={{margin: 10}} onClick={this.handleSubmit} >\n                   Submit\n                </Button>\n              </div>\n              <ToastContainer autoClose={1500} />   \n            </div>\n            ); \n        };\n}\n\nexport default Gradebook;"]},"metadata":{},"sourceType":"module"}